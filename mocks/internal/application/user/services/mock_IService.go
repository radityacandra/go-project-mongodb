// Code generated by mockery v2.38.0. DO NOT EDIT.

package services

import (
	context "context"

	dto "github.com/radityacandra/go-project-mongodb/internal/application/user/dto"
	mock "github.com/stretchr/testify/mock"
)

// MockIService is an autogenerated mock type for the IService type
type MockIService struct {
	mock.Mock
}

type MockIService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIService) EXPECT() *MockIService_Expecter {
	return &MockIService_Expecter{mock: &_m.Mock}
}

// Authenticate provides a mock function with given fields: ctx, req
func (_m *MockIService) Authenticate(ctx context.Context, req dto.AuthenticateRequest) (dto.AuthenticateResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Authenticate")
	}

	var r0 dto.AuthenticateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.AuthenticateRequest) (dto.AuthenticateResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.AuthenticateRequest) dto.AuthenticateResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(dto.AuthenticateResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.AuthenticateRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIService_Authenticate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Authenticate'
type MockIService_Authenticate_Call struct {
	*mock.Call
}

// Authenticate is a helper method to define mock.On call
//   - ctx context.Context
//   - req dto.AuthenticateRequest
func (_e *MockIService_Expecter) Authenticate(ctx interface{}, req interface{}) *MockIService_Authenticate_Call {
	return &MockIService_Authenticate_Call{Call: _e.mock.On("Authenticate", ctx, req)}
}

func (_c *MockIService_Authenticate_Call) Run(run func(ctx context.Context, req dto.AuthenticateRequest)) *MockIService_Authenticate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dto.AuthenticateRequest))
	})
	return _c
}

func (_c *MockIService_Authenticate_Call) Return(_a0 dto.AuthenticateResponse, _a1 error) *MockIService_Authenticate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIService_Authenticate_Call) RunAndReturn(run func(context.Context, dto.AuthenticateRequest) (dto.AuthenticateResponse, error)) *MockIService_Authenticate_Call {
	_c.Call.Return(run)
	return _c
}

// Logout provides a mock function with given fields: ctx
func (_m *MockIService) Logout(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Logout")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIService_Logout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Logout'
type MockIService_Logout_Call struct {
	*mock.Call
}

// Logout is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockIService_Expecter) Logout(ctx interface{}) *MockIService_Logout_Call {
	return &MockIService_Logout_Call{Call: _e.mock.On("Logout", ctx)}
}

func (_c *MockIService_Logout_Call) Run(run func(ctx context.Context)) *MockIService_Logout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockIService_Logout_Call) Return(_a0 error) *MockIService_Logout_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIService_Logout_Call) RunAndReturn(run func(context.Context) error) *MockIService_Logout_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function with given fields: ctx, req
func (_m *MockIService) Register(ctx context.Context, req dto.RegisterRequest) (dto.RegisterResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 dto.RegisterResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.RegisterRequest) (dto.RegisterResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.RegisterRequest) dto.RegisterResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(dto.RegisterResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.RegisterRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIService_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type MockIService_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - ctx context.Context
//   - req dto.RegisterRequest
func (_e *MockIService_Expecter) Register(ctx interface{}, req interface{}) *MockIService_Register_Call {
	return &MockIService_Register_Call{Call: _e.mock.On("Register", ctx, req)}
}

func (_c *MockIService_Register_Call) Run(run func(ctx context.Context, req dto.RegisterRequest)) *MockIService_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dto.RegisterRequest))
	})
	return _c
}

func (_c *MockIService_Register_Call) Return(_a0 dto.RegisterResponse, _a1 error) *MockIService_Register_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIService_Register_Call) RunAndReturn(run func(context.Context, dto.RegisterRequest) (dto.RegisterResponse, error)) *MockIService_Register_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIService creates a new instance of MockIService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIService {
	mock := &MockIService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
