// Code generated by mockery v2.38.0. DO NOT EDIT.

package services

import (
	context "context"

	dto "github.com/radityacandra/go-project-mongodb/internal/application/building/dto"
	mock "github.com/stretchr/testify/mock"
)

// MockIService is an autogenerated mock type for the IService type
type MockIService struct {
	mock.Mock
}

type MockIService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIService) EXPECT() *MockIService_Expecter {
	return &MockIService_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, req
func (_m *MockIService) Create(ctx context.Context, req dto.CreateRequest) (dto.CreateResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 dto.CreateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.CreateRequest) (dto.CreateResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.CreateRequest) dto.CreateResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(dto.CreateResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.CreateRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIService_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockIService_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - req dto.CreateRequest
func (_e *MockIService_Expecter) Create(ctx interface{}, req interface{}) *MockIService_Create_Call {
	return &MockIService_Create_Call{Call: _e.mock.On("Create", ctx, req)}
}

func (_c *MockIService_Create_Call) Run(run func(ctx context.Context, req dto.CreateRequest)) *MockIService_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dto.CreateRequest))
	})
	return _c
}

func (_c *MockIService_Create_Call) Return(_a0 dto.CreateResponse, _a1 error) *MockIService_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIService_Create_Call) RunAndReturn(run func(context.Context, dto.CreateRequest) (dto.CreateResponse, error)) *MockIService_Create_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, req
func (_m *MockIService) List(ctx context.Context, req dto.ListRequest) (dto.MetaResponse, []dto.ListResponse) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 dto.MetaResponse
	var r1 []dto.ListResponse
	if rf, ok := ret.Get(0).(func(context.Context, dto.ListRequest) (dto.MetaResponse, []dto.ListResponse)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.ListRequest) dto.MetaResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(dto.MetaResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.ListRequest) []dto.ListResponse); ok {
		r1 = rf(ctx, req)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]dto.ListResponse)
		}
	}

	return r0, r1
}

// MockIService_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockIService_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - req dto.ListRequest
func (_e *MockIService_Expecter) List(ctx interface{}, req interface{}) *MockIService_List_Call {
	return &MockIService_List_Call{Call: _e.mock.On("List", ctx, req)}
}

func (_c *MockIService_List_Call) Run(run func(ctx context.Context, req dto.ListRequest)) *MockIService_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dto.ListRequest))
	})
	return _c
}

func (_c *MockIService_List_Call) Return(_a0 dto.MetaResponse, _a1 []dto.ListResponse) *MockIService_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIService_List_Call) RunAndReturn(run func(context.Context, dto.ListRequest) (dto.MetaResponse, []dto.ListResponse)) *MockIService_List_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIService creates a new instance of MockIService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIService {
	mock := &MockIService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
