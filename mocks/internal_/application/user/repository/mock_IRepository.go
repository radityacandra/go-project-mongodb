// Code generated by mockery v2.38.0. DO NOT EDIT.

package repository

import (
	context "context"

	model "github.com/radityacandra/go-project-mongodb/internal/application/user/model"
	mock "github.com/stretchr/testify/mock"
)

// MockIRepository is an autogenerated mock type for the IRepository type
type MockIRepository struct {
	mock.Mock
}

type MockIRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIRepository) EXPECT() *MockIRepository_Expecter {
	return &MockIRepository_Expecter{mock: &_m.Mock}
}

// GetByUsername provides a mock function with given fields: ctx, userName
func (_m *MockIRepository) GetByUsername(ctx context.Context, userName string) *model.User {
	ret := _m.Called(ctx, userName)

	if len(ret) == 0 {
		panic("no return value specified for GetByUsername")
	}

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.User); ok {
		r0 = rf(ctx, userName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	return r0
}

// MockIRepository_GetByUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByUsername'
type MockIRepository_GetByUsername_Call struct {
	*mock.Call
}

// GetByUsername is a helper method to define mock.On call
//   - ctx context.Context
//   - userName string
func (_e *MockIRepository_Expecter) GetByUsername(ctx interface{}, userName interface{}) *MockIRepository_GetByUsername_Call {
	return &MockIRepository_GetByUsername_Call{Call: _e.mock.On("GetByUsername", ctx, userName)}
}

func (_c *MockIRepository_GetByUsername_Call) Run(run func(ctx context.Context, userName string)) *MockIRepository_GetByUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockIRepository_GetByUsername_Call) Return(_a0 *model.User) *MockIRepository_GetByUsername_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIRepository_GetByUsername_Call) RunAndReturn(run func(context.Context, string) *model.User) *MockIRepository_GetByUsername_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserBySessionId provides a mock function with given fields: ctx, userId, sessionId
func (_m *MockIRepository) GetUserBySessionId(ctx context.Context, userId string, sessionId string) *model.User {
	ret := _m.Called(ctx, userId, sessionId)

	if len(ret) == 0 {
		panic("no return value specified for GetUserBySessionId")
	}

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *model.User); ok {
		r0 = rf(ctx, userId, sessionId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	return r0
}

// MockIRepository_GetUserBySessionId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserBySessionId'
type MockIRepository_GetUserBySessionId_Call struct {
	*mock.Call
}

// GetUserBySessionId is a helper method to define mock.On call
//   - ctx context.Context
//   - userId string
//   - sessionId string
func (_e *MockIRepository_Expecter) GetUserBySessionId(ctx interface{}, userId interface{}, sessionId interface{}) *MockIRepository_GetUserBySessionId_Call {
	return &MockIRepository_GetUserBySessionId_Call{Call: _e.mock.On("GetUserBySessionId", ctx, userId, sessionId)}
}

func (_c *MockIRepository_GetUserBySessionId_Call) Run(run func(ctx context.Context, userId string, sessionId string)) *MockIRepository_GetUserBySessionId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockIRepository_GetUserBySessionId_Call) Return(_a0 *model.User) *MockIRepository_GetUserBySessionId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIRepository_GetUserBySessionId_Call) RunAndReturn(run func(context.Context, string, string) *model.User) *MockIRepository_GetUserBySessionId_Call {
	_c.Call.Return(run)
	return _c
}

// RevokeSession provides a mock function with given fields: ctx, userId, sessionId
func (_m *MockIRepository) RevokeSession(ctx context.Context, userId string, sessionId string) error {
	ret := _m.Called(ctx, userId, sessionId)

	if len(ret) == 0 {
		panic("no return value specified for RevokeSession")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, userId, sessionId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIRepository_RevokeSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevokeSession'
type MockIRepository_RevokeSession_Call struct {
	*mock.Call
}

// RevokeSession is a helper method to define mock.On call
//   - ctx context.Context
//   - userId string
//   - sessionId string
func (_e *MockIRepository_Expecter) RevokeSession(ctx interface{}, userId interface{}, sessionId interface{}) *MockIRepository_RevokeSession_Call {
	return &MockIRepository_RevokeSession_Call{Call: _e.mock.On("RevokeSession", ctx, userId, sessionId)}
}

func (_c *MockIRepository_RevokeSession_Call) Run(run func(ctx context.Context, userId string, sessionId string)) *MockIRepository_RevokeSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockIRepository_RevokeSession_Call) Return(_a0 error) *MockIRepository_RevokeSession_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIRepository_RevokeSession_Call) RunAndReturn(run func(context.Context, string, string) error) *MockIRepository_RevokeSession_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: ctx, user
func (_m *MockIRepository) Save(ctx context.Context, user *model.User) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockIRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx context.Context
//   - user *model.User
func (_e *MockIRepository_Expecter) Save(ctx interface{}, user interface{}) *MockIRepository_Save_Call {
	return &MockIRepository_Save_Call{Call: _e.mock.On("Save", ctx, user)}
}

func (_c *MockIRepository_Save_Call) Run(run func(ctx context.Context, user *model.User)) *MockIRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.User))
	})
	return _c
}

func (_c *MockIRepository_Save_Call) Return(_a0 error) *MockIRepository_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIRepository_Save_Call) RunAndReturn(run func(context.Context, *model.User) error) *MockIRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// SaveSession provides a mock function with given fields: ctx, user
func (_m *MockIRepository) SaveSession(ctx context.Context, user *model.User) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for SaveSession")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIRepository_SaveSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveSession'
type MockIRepository_SaveSession_Call struct {
	*mock.Call
}

// SaveSession is a helper method to define mock.On call
//   - ctx context.Context
//   - user *model.User
func (_e *MockIRepository_Expecter) SaveSession(ctx interface{}, user interface{}) *MockIRepository_SaveSession_Call {
	return &MockIRepository_SaveSession_Call{Call: _e.mock.On("SaveSession", ctx, user)}
}

func (_c *MockIRepository_SaveSession_Call) Run(run func(ctx context.Context, user *model.User)) *MockIRepository_SaveSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.User))
	})
	return _c
}

func (_c *MockIRepository_SaveSession_Call) Return(_a0 error) *MockIRepository_SaveSession_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIRepository_SaveSession_Call) RunAndReturn(run func(context.Context, *model.User) error) *MockIRepository_SaveSession_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIRepository creates a new instance of MockIRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIRepository {
	mock := &MockIRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
