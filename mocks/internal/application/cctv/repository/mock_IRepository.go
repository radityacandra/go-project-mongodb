// Code generated by mockery v2.38.0. DO NOT EDIT.

package repository

import (
	context "context"

	model "github.com/radityacandra/go-project-mongodb/internal/application/cctv/model"
	mock "github.com/stretchr/testify/mock"
)

// MockIRepository is an autogenerated mock type for the IRepository type
type MockIRepository struct {
	mock.Mock
}

type MockIRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIRepository) EXPECT() *MockIRepository_Expecter {
	return &MockIRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, cctv
func (_m *MockIRepository) Create(ctx context.Context, cctv *model.Cctv) error {
	ret := _m.Called(ctx, cctv)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Cctv) error); ok {
		r0 = rf(ctx, cctv)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockIRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - cctv *model.Cctv
func (_e *MockIRepository_Expecter) Create(ctx interface{}, cctv interface{}) *MockIRepository_Create_Call {
	return &MockIRepository_Create_Call{Call: _e.mock.On("Create", ctx, cctv)}
}

func (_c *MockIRepository_Create_Call) Run(run func(ctx context.Context, cctv *model.Cctv)) *MockIRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.Cctv))
	})
	return _c
}

func (_c *MockIRepository_Create_Call) Return(_a0 error) *MockIRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIRepository_Create_Call) RunAndReturn(run func(context.Context, *model.Cctv) error) *MockIRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// FindById provides a mock function with given fields: ctx, userId, id
func (_m *MockIRepository) FindById(ctx context.Context, userId string, id string) *model.Cctv {
	ret := _m.Called(ctx, userId, id)

	if len(ret) == 0 {
		panic("no return value specified for FindById")
	}

	var r0 *model.Cctv
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *model.Cctv); ok {
		r0 = rf(ctx, userId, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Cctv)
		}
	}

	return r0
}

// MockIRepository_FindById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindById'
type MockIRepository_FindById_Call struct {
	*mock.Call
}

// FindById is a helper method to define mock.On call
//   - ctx context.Context
//   - userId string
//   - id string
func (_e *MockIRepository_Expecter) FindById(ctx interface{}, userId interface{}, id interface{}) *MockIRepository_FindById_Call {
	return &MockIRepository_FindById_Call{Call: _e.mock.On("FindById", ctx, userId, id)}
}

func (_c *MockIRepository_FindById_Call) Run(run func(ctx context.Context, userId string, id string)) *MockIRepository_FindById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockIRepository_FindById_Call) Return(_a0 *model.Cctv) *MockIRepository_FindById_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIRepository_FindById_Call) RunAndReturn(run func(context.Context, string, string) *model.Cctv) *MockIRepository_FindById_Call {
	_c.Call.Return(run)
	return _c
}

// FindByUserIdAndName provides a mock function with given fields: ctx, userId, name
func (_m *MockIRepository) FindByUserIdAndName(ctx context.Context, userId string, name string) *model.Cctv {
	ret := _m.Called(ctx, userId, name)

	if len(ret) == 0 {
		panic("no return value specified for FindByUserIdAndName")
	}

	var r0 *model.Cctv
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *model.Cctv); ok {
		r0 = rf(ctx, userId, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Cctv)
		}
	}

	return r0
}

// MockIRepository_FindByUserIdAndName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByUserIdAndName'
type MockIRepository_FindByUserIdAndName_Call struct {
	*mock.Call
}

// FindByUserIdAndName is a helper method to define mock.On call
//   - ctx context.Context
//   - userId string
//   - name string
func (_e *MockIRepository_Expecter) FindByUserIdAndName(ctx interface{}, userId interface{}, name interface{}) *MockIRepository_FindByUserIdAndName_Call {
	return &MockIRepository_FindByUserIdAndName_Call{Call: _e.mock.On("FindByUserIdAndName", ctx, userId, name)}
}

func (_c *MockIRepository_FindByUserIdAndName_Call) Run(run func(ctx context.Context, userId string, name string)) *MockIRepository_FindByUserIdAndName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockIRepository_FindByUserIdAndName_Call) Return(_a0 *model.Cctv) *MockIRepository_FindByUserIdAndName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIRepository_FindByUserIdAndName_Call) RunAndReturn(run func(context.Context, string, string) *model.Cctv) *MockIRepository_FindByUserIdAndName_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, cctv
func (_m *MockIRepository) Update(ctx context.Context, cctv *model.Cctv) error {
	ret := _m.Called(ctx, cctv)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Cctv) error); ok {
		r0 = rf(ctx, cctv)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockIRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - cctv *model.Cctv
func (_e *MockIRepository_Expecter) Update(ctx interface{}, cctv interface{}) *MockIRepository_Update_Call {
	return &MockIRepository_Update_Call{Call: _e.mock.On("Update", ctx, cctv)}
}

func (_c *MockIRepository_Update_Call) Run(run func(ctx context.Context, cctv *model.Cctv)) *MockIRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.Cctv))
	})
	return _c
}

func (_c *MockIRepository_Update_Call) Return(_a0 error) *MockIRepository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIRepository_Update_Call) RunAndReturn(run func(context.Context, *model.Cctv) error) *MockIRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIRepository creates a new instance of MockIRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIRepository {
	mock := &MockIRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
